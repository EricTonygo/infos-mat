<?php

namespace NNGenie\ExploitationBundle\Controller;

use Symfony\Bundle\FrameworkBundle\Controller\Controller;
use Sensio\Bundle\FrameworkExtraBundle\Configuration\Method;
use Sensio\Bundle\FrameworkExtraBundle\Configuration\Route;
use Sensio\Bundle\FrameworkExtraBundle\Configuration\Template;
use Symfony\Component\HttpFoundation\Request;
use NNGenie\ExploitationBundle\Entity\Personnel;
use NNGenie\ExploitationBundle\Form\PersonnelType;


class PersonnelController extends Controller
{
    /**
     * Creates a new Personnel entity.
     *
     * @Route("/Exploitation/new-personnel")
     * @Template()
     * @Method({"POST", "GET"})
     * @param Request $request
     */
    public function addAction(Request $request) {
        if (!$this->get('security.context')->isGranted('IS_AUTHENTICATED_REMEMBERED')) {
            return $this->redirect($this->generateUrl('fos_user_security_login'));
        }
        $personnel = new Personnel();
        $personnelUnique = new Personnel();
        $form = $this->createForm(new PersonnelType(), $personnel);
        $form->handleRequest($request);
        $repositoryPersonnel = $this->getDoctrine()->getManager()->getRepository("NNGenieExploitationBundle:Personnel");
             
        if ($request->isMethod("POST") || $request->isMethod("GET")) {
            
            if ($form->isSubmitted() && $form->isValid()) {
                $personnelUnique = $repositoryPersonnel->findBy(array("nom" => $personnel->getNom(),"statut" => 1));
                if ($personnelUnique == null) {
                    try {
                        $repositoryPersonnel->savePersonnel($personnel);
                        $message = $this->get('translator')->trans('Personnel.created_success', array(), "NNGenieExploitationBundle");
                        $request->getSession()->getFlashBag()->add('message_success', $message);
                        $newqual = new Personnel();
						$form = $this->createForm(new PersonnelType(), $newqual);
						return $this->render('NNGenieExploitationBundle:Personnel:form-add-personnel.html.twig', array('form' => $form->createView()));
                    } catch (Exception $ex) {
                        $message = $this->get('translator')->trans('Personnel.created_failure', array(), "NNGenieExploitationBundle");
                        $request->getSession()->getFlashBag()->add('message_faillure', $message);
                        return $this->render('NNGenieExploitationBundle:Personnel:form-add-personnel.html.twig', array('form' => $form->createView()));
                    }
                } else {
                    $message = $this->get('translator')->trans('Personnel.exist_already', array(), "NNGenieExploitationBundle");
                    $request->getSession()->getFlashBag()->add('message_faillure', $message);
                    return $this->render('NNGenieExploitationBundle:Personnel:form-add-personnel.html.twig', array('form' => $form->createView()));
                }
            }
            return $this->render('NNGenieExploitationBundle:Personnel:form-add-personnel.html.twig', array('form' => $form->createView()));
        } else {
            return $this->redirect($this->generateUrl('nn_genie_exploitation_view_personnel'));
        }
    }
    
    /**
     * @Route("/Exploitation/personnels")
     * @Template()
     * @Method({"GET"})
     * @param Request $request
     */
    public function getAllAction() {
        if (!$this->get('security.context')->isGranted('IS_AUTHENTICATED_REMEMBERED')) {
            return $this->redirect($this->generateUrl('fos_user_security_login'));
        }
        $em = $this->getDoctrine()->getManager();
        
        $repositoryTypeexploitation = $em->getRepository("NNGenieExploitationBundle:Typeexploitation");
        $repositorySpecialite = $em->getRepository("NNGenieExploitationBundle:Specialite");
        $repositoryQualification = $em->getRepository("NNGenieExploitationBundle:Qualification");
        $repositoryEmployeur = $em->getRepository("NNGenieExploitationBundle:Employeur");
        $repositoryDiplome = $em->getRepository("NNGenieExploitationBundle:Diplome");
        $repositoryGenre = $em->getRepository("NNGenieInfosMatBundle:Genre");
        
        $typexploitations = $repositoryTypeexploitation->findBy(array("statut" => 1));
        $specialites = $repositorySpecialite->findBy(array("statut" => 1));
        $qualifications = $repositoryQualification->findBy(array("statut" => 1));
        $employeurs = $repositoryEmployeur->findBy(array("statut" => 1));
        $diplomes = $repositoryDiplome->findBy(array("statut" => 1));
        $genres = $repositoryGenre->findBy(array("statut" => 1));
        
        $repositoryPersonnel = $em->getRepository("NNGenieExploitationBundle:Personnel");
        $personnel = new Personnel();
        $form = $this->createForm(new PersonnelType(), $personnel);
        $display_tab = 1;
        //selectionne les seuls $personnels actifs
        $personnels = $repositoryPersonnel->findBy(array("statut" => 1));

        return $this->render('NNGenieExploitationBundle:Personnel:personnel.html.twig', array('personnels' => $personnels, 'form' => $form->createView(), "display_tab" => $display_tab, 'typexploitations' => $typexploitations, 'specialites' => $specialites, 'qualifications' => $qualifications, 'employeurs' => $employeurs, 'diplomes' => $diplomes, 'genres' => $genres));
    }
    
    /**
     * Deletes a Personnel entity.
     *
     * @Route("/delete-personnel/{id}")
     * @Template()
     * @Method({"GET"})
     */
    public function deleteAction(Personnel $personnel) {
        $request = $this->get("request");
        $repositoryPersonnel = $this->getDoctrine()->getManager()->getRepository("NNGenieExploitationBundle:Personnel");
        if ($request->isMethod('GET')) {
            try {
                $repositoryPersonnel->deletePersonnel($personnel);
                $message = $message = $this->get('translator')->trans('Personnel.deleted_success', array(), "NNGenieExploitationBundle");
                $request->getSession()->getFlashBag()->add('message_success', $message);
                    return $this->redirect($this->generateUrl('nn_genie_exploitation_view_personnel'));
            } catch (Exception $ex) {
                $message = $message = $this->get('translator')->trans('Personnel.deleted_failure', array(), "NNGenieExploitationBundle");
                $request->getSession()->getFlashBag()->add('message_faillure', $message);
                return $this->redirect($this->generateUrl('nn_genie_exploitation_view_personnel'));
            }
        } else {
            return $this->redirect($this->generateUrl('nn_genie_exploitation_view_personnel'));
        }
    }
    
     /**
     * Displays a form to edit an existing Personnel entity.
     *
     * @Route("/edit-personnel/{id}")
     * @Template()
     * @Method({"POST", "GET"})
     * @param Request $request
     */
    public function editAction(Request $request, Personnel $personnel) {
        // $deleteForm = $this->createDeleteForm($personnel);        
        $editForm = $this->createForm(new PersonnelType(), $personnel);
        $editForm->handleRequest($request);
        $repositoryPersonnel = $this->getDoctrine()->getManager()->getRepository("NNGenieExploitationBundle:Personnel");

        if ($request->isMethod("POST") || $request->isMethod("GET")) {
            if ($editForm->isSubmitted() && $editForm->isValid()) {
                try {
                    $repositoryPersonnel->updatePersonnel($personnel);
                    $message = $this->get('translator')->trans('Personnel.updated_success', array(), "NNGenieExploitationBundle");
                    $request->getSession()->getFlashBag()->add('message_success', $message);
                    return $this->redirect($this->generateUrl('nn_genie_exploitation_view_personnel'));
                } catch (Exception $ex) {
                    $message = $this->get('translator')->trans('Personnel.updated_failure', array(), "NNGenieExploitationBundle");
                    $request->getSession()->getFlashBag()->add('message_faillure', $message);
                    return $this->render('NNGenieExploitationBundle:Personnel:form-update-personnel.html.twig', array('form' => $editForm->createView(), 'idpersonnel' => $personnel->getId()));
                }
            }
            return $this->render('NNGenieExploitationBundle:Personnel:form-update-personnel.html.twig', array('form' => $editForm->createView(), 'idpersonnel' => $personnel->getId()));
        } else {
            return $this->redirect($this->generateUrl('nn_genie_exploitation_view_personnel'));
        }
    }
    
    /**
     *
     * @Route("/detail-personnel/{id}")
     * @Template()
     * @Method({"GET"})
     */
    public function detailAction(Personnel $person) {
        $request = $this->get("request");
        $em = $this->getDoctrine()->getManager();
        $repositoryPersonnel = $em->getRepository("NNGenieExploitationBundle:Personnel");
        if ($request->isMethod('GET')) {
            $personnel = $repositoryPersonnel->findBy(array('id' => $person, 'statut' => 1));
            return $this->render('NNGenieExploitationBundle:Personnel:details-personnel.html.twig', array('personnel' => $personnel[array_keys($personnel)[0]]));
        } else {
            return $this->redirect($this->generateUrl('nn_genie_exploitation_view_personnel'));
        }
    }
    
    
    /**
     * @Route("/filtre-personnels")
     * @Template()
     * @Method({"POST","GET"})
     * @param Request $request
     */
    public function filtrepersonnelAction(Request $request) {
        // Si le visiteur est déjà identifié, on le redirige vers l'accueil
         if (!$this->get('security.context')->isGranted('IS_AUTHENTICATED_REMEMBERED')) {
          return $this->redirect($this->generateUrl('fos_user_security_login'));
          } 
        if ($request->isMethod("POST")) {
            $idtypexploitations = $request->request->get("typexploitations");
            $idspecialites = $request->request->get("specialites");
            $idqualifications = $request->request->get("qualifications");
            $idemployeurs = $request->request->get("employeurs");
            $iddiplomes = $request->request->get("diplomes");
            $idgenres = $request->request->get("genres");
            
            $em = $this->getDoctrine()->getManager();
            $repositoryTypeexploitation = $em->getRepository("NNGenieExploitationBundle:Typeexploitation");
            $repositorySpecialite = $em->getRepository("NNGenieExploitationBundle:Specialite");
            $repositoryQualification = $em->getRepository("NNGenieExploitationBundle:Qualification");
            $repositoryEmployeur = $em->getRepository("NNGenieExploitationBundle:Employeur");
            $repositoryDiplome = $em->getRepository("NNGenieExploitationBundle:Diplome");
            $repositoryGenre = $em->getRepository("NNGenieInfosMatBundle:Genre");
            //selectionne les seuls materiels actifs
            $repositoryPersonnel = $em->getRepository("NNGenieExploitationBundle:Personnel");
            $personnels = $repositoryPersonnel->filtrePersonnelBy($idtypexploitations, $idspecialites, $idqualifications, $idemployeurs, $iddiplomes, $idgenres);
            
            $typexploitations = $repositoryTypeexploitation->findBy(array("statut" => 1));
            $specialites = $repositorySpecialite->findBy(array("statut" => 1));
            $qualifications = $repositoryQualification->findBy(array("statut" => 1));
            $employeurs = $repositoryEmployeur->findBy(array("statut" => 1));
            $diplomes = $repositoryDiplome->findBy(array("statut" => 1));
            $genres = $repositoryGenre->findBy(array("statut" => 1));
            
            return $this->render('NNGenieExploitationBundle:Personnel:personnel.html.twig', array('personnels' => $personnels, 'typexploitations' => $typexploitations, 'specialites' => $specialites, 'qualifications' => $qualifications, 'employeurs' => $employeurs, 'diplomes' => $diplomes, 'genres' => $genres));
        } else {
            return $this->redirect($this->generateUrl('nn_genie_exploitation_view_personnel'));
        }
    }


}
