<?php

namespace NNGenie\ExploitationBundle\Controller;

use Symfony\Bundle\FrameworkBundle\Controller\Controller;
use Sensio\Bundle\FrameworkExtraBundle\Configuration\Method;
use Sensio\Bundle\FrameworkExtraBundle\Configuration\Route;
use Sensio\Bundle\FrameworkExtraBundle\Configuration\Template;
use Symfony\Component\HttpFoundation\Request;
use NNGenie\ExploitationBundle\Entity\Domaine;
use NNGenie\ExploitationBundle\Form\DomaineType;


class DomaineController extends Controller
{
    /**
     * Creates a new Domaine entity.
     *
     * @Route("/Exploitation/new-domaine")
     * @Template()
     * @Method({"POST", "GET"})
     * @param Request $request
     */
    public function addAction(Request $request) {
        if (!$this->get('security.context')->isGranted('IS_AUTHENTICATED_REMEMBERED')) {
            return $this->redirect($this->generateUrl('fos_user_security_login'));
        }
        $domaine = new Domaine();
        $domaineUnique = new Domaine();
        $form = $this->createForm(new DomaineType(), $domaine);
        $form->handleRequest($request);
        $repositoryDomaine = $this->getDoctrine()->getManager()->getRepository("NNGenieExploitationBundle:Domaine");

        if ($request->isMethod("POST") || $request->isMethod("GET")) {
            if ($form->isSubmitted() && $form->isValid()) {
                $domaineUnique = $repositoryDomaine->findBy(array("nom" => $domaine->getNom(),"statut" => 1));
                if ($domaineUnique == null) {
                    try {
                        $repositoryDomaine->saveDomaine($domaine);
                        $message = $this->get('translator')->trans('Domaine.created_success', array(), "NNGenieExploitationBundle");
                        $request->getSession()->getFlashBag()->add('message_success', $message);
                        $newqual = new Domaine();
						$form = $this->createForm(new DomaineType(), $newqual);
						return $this->render('NNGenieExploitationBundle:Domaine:form-add-domaine.html.twig', array('form' => $form->createView()));
                    } catch (Exception $ex) {
                        $message = $this->get('translator')->trans('Domaine.created_failure', array(), "NNGenieExploitationBundle");
                        $request->getSession()->getFlashBag()->add('message_faillure', $message);
                        return $this->render('NNGenieExploitationBundle:Domaine:form-add-domaine.html.twig', array('form' => $form->createView()));
                    }
                } else {
                    $message = $this->get('translator')->trans('Domaine.exist_already', array(), "NNGenieExploitationBundle");
                    $request->getSession()->getFlashBag()->add('message_faillure', $message);
                    return $this->render('NNGenieExploitationBundle:Domaine:form-add-domaine.html.twig', array('form' => $form->createView()));
                }
            }
            return $this->render('NNGenieExploitationBundle:Domaine:form-add-domaine.html.twig', array('form' => $form->createView()));
        } else {
            return $this->redirect($this->generateUrl('nn_genie_exploitation_view_domaine'));
        }
    }
    
    /**
     * @Route("/Exploitation/domaines")
     * @Template()
     * @Method({"GET"})
     * @param Request $request
     */
    public function getAllAction() {
        if (!$this->get('security.context')->isGranted('IS_AUTHENTICATED_REMEMBERED')) {
            return $this->redirect($this->generateUrl('fos_user_security_login'));
        }
        $em = $this->getDoctrine()->getManager();

        $repositoryDomaine = $em->getRepository("NNGenieExploitationBundle:Domaine");
        $domaine = new Domaine();
        $form = $this->createForm(new DomaineType(), $domaine);
        $display_tab = 1;
        //selectionne les seuls $domaines actifs
        $domaines = $repositoryDomaine->findBy(array("statut" => 1));

        return $this->render('NNGenieExploitationBundle:Domaine:domaine.html.twig', array('domaines' => $domaines, 'form' => $form->createView(), "display_tab" => $display_tab));
    }
    
    /**
     * Deletes a Domaine entity.
     *
     * @Route("/Exploitation/delete-domaine/{id}")
     * @Template()
     * @Method({"GET"})
     */
    public function deleteAction(Domaine $domaine) {
        $request = $this->get("request");
        $repositoryDomaine = $this->getDoctrine()->getManager()->getRepository("NNGenieExploitationBundle:Domaine");
        if ($request->isMethod('GET')) {
            try {
                $repositoryDomaine->deleteDomaine($domaine);
                $message = $message = $this->get('translator')->trans('Domaine.deleted_success', array(), "NNGenieExploitationBundle");
                $request->getSession()->getFlashBag()->add('message_success', $message);
                    return $this->redirect($this->generateUrl('nn_genie_exploitation_view_domaine'));
            } catch (Exception $ex) {
                $message = $message = $this->get('translator')->trans('Domaine.deleted_failure', array(), "NNGenieExploitationBundle");
                $request->getSession()->getFlashBag()->add('message_faillure', $message);
                return $this->redirect($this->generateUrl('nn_genie_exploitation_view_domaine'));
            }
        } else {
            return $this->redirect($this->generateUrl('nn_genie_exploitation_view_domaine'));
        }
    }
    
     /**
     * Displays a form to edit an existing Domaine entity.
     *
     * @Route("/Exploitation/edit-domaine/{id}")
     * @Template()
     * @Method({"POST", "GET"})
     * @param Request $request
     */
    public function editAction(Request $request, Domaine $domaine) {
        // $deleteForm = $this->createDeleteForm($domaine);
        $editForm = $this->createForm(new DomaineType(), $domaine);
        $editForm->handleRequest($request);
        $repositoryDomaine = $this->getDoctrine()->getManager()->getRepository("NNGenieExploitationBundle:Domaine");

        if ($request->isMethod("POST") || $request->isMethod("GET")) {
            if ($editForm->isSubmitted() && $editForm->isValid()) {
                try {
                    $repositoryDomaine->updateDomaine($domaine);
                    $message = $this->get('translator')->trans('Domaine.updated_success', array(), "NNGenieExploitationBundle");
                    $request->getSession()->getFlashBag()->add('message_success', $message);
                    return $this->redirect($this->generateUrl('nn_genie_exploitation_view_domaine'));
                } catch (Exception $ex) {
                    $message = $this->get('translator')->trans('Domaine.updated_failure', array(), "NNGenieExploitationBundle");
                    $request->getSession()->getFlashBag()->add('message_faillure', $message);
                    return $this->render('NNGenieExploitationBundle:Domaine:form-update-domaine.html.twig', array('form' => $editForm->createView(), 'iddomaine' => $domaine->getId()));
                }
            }
            return $this->render('NNGenieExploitationBundle:Domaine:form-update-domaine.html.twig', array('form' => $editForm->createView(), 'iddomaine' => $domaine->getId()));
        } else {
            return $this->redirect($this->generateUrl('nn_genie_exploitation_view_domaine'));
        }
    }

}
