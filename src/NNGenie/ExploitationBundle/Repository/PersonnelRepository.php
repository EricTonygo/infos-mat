<?php

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

namespace NNGenie\ExploitationBundle\Repository;

use Doctrine\ORM\EntityRepository;

/**
 * Description of PersonnelRepository
 *
 * @author TONYE
 */
class PersonnelRepository extends EntityRepository implements IPersonnelRepository{
    //put your code here
    
    public function deletePersonnel(\NNGenie\ExploitationBundle\Entity\Personnel $personnel) {
        $em= $this->_em;
        $personnel->setStatut(0);
        $em->getConnection()->beginTransaction();
        try{
            foreach ($personnel->getDiplome() as $diplome){
                $diplome->setStatut(0);
                $em->persist($diplome);
            }
            $em->persist($personnel);
            $em->flush();
            $em->getConnection()->commit();
        } catch (Exception $ex) {
            $em->getConnection()->rollback();
            $em->close();
            throw $ex;
        }
    }

    public function savePersonnel(\NNGenie\ExploitationBundle\Entity\Personnel $personnel) {
        $em= $this->_em;
        $personnel->setStatut(1);
        $em->getConnection()->beginTransaction();
        try{
            $em->persist($personnel);
            $em->flush();
            $em->getConnection()->commit();
        } catch (Exception $ex) {
            $em->getConnection()->rollback();
            $em->close();
            throw $ex;
        }
    }

    public function updatePersonnel(\NNGenie\ExploitationBundle\Entity\Personnel $personnel) {
        $em= $this->_em;
        $em->getConnection()->beginTransaction();
        try{
            $em->persist($personnel);
            $em->flush();
            $em->getConnection()->commit();
        } catch (Exception $ex) {
            $em->getConnection()->rollback();
            $em->close();
            throw $ex;
        }
    }
    
    public function getPersonnelQueryBuilder() {
        return $this
         ->createQueryBuilder('p')
         ->where('p.statut = :statut')
         ->setParameter('statut', 1);

    }

    public function filtrePersonnelBy($typexploitations, $specialites, $qualifications, $employeurs, $diplomes, $genres) {
        $q = $this->createQueryBuilder('p');
        $q->where("p.statut = 1");

        if ($typexploitations && !empty($typexploitations) && array_values($typexploitations)[0]!='') {
            $q->join("p.typeexploitation", "typeexploitation");
            $count = 1;
            $chaine = '';
            $parametres = array();
            foreach ($typexploitations as $idtype) {
                if($count == 1){
                    $chaine = 'typeexploitation.id = :value' . $count;
                }else{
                    $chaine = $chaine . ' OR typeexploitation.id = :value' . $count;
                }
                $parametres['value' . $count] = $idtype;
                $count++;
            }
            $q->where($chaine);
            $q->setParameters($parametres);
            
        }
        if ($specialites && !empty($specialites) && array_values($specialites)[0]!='') {
            $q->join("p.specialite", 'specialite');
            $count = 1;
            $chaine = '';
            $parametres = array();
            foreach ($specialites as $idspecialit) {
                if($count == 1){
                    $chaine = 'specialite.id = :value' . $count;
                }else{
                    $chaine = $chaine . ' OR specialite.id = :value' . $count;
                }
                $parametres['value' . $count] = $idspecialit;
                $count++;
            }
            $q->where($chaine);
            $q->setParameters($parametres);
        }
        if ($qualifications && !empty($qualifications) && array_values($qualifications)[0]!='') {
            $q->join("p.qualification", 'qualification');
            $count = 1;
            $chaine = '';
            $parametres = array();
            foreach ($qualifications as $idqualification) {
                if($count == 1){
                    $chaine = 'qualification.id = :value' . $count;
                }else{
                    $chaine = $chaine . ' OR qualification.id = :value' . $count;
                }
                $parametres['value' . $count] = $idqualification;
                $count++;
            }
            $q->where($chaine);
            $q->setParameters($parametres);
        }
        if ($employeurs && !empty($employeurs) && array_values($employeurs)[0]!='') {
            $q->join("p.employeur", 'employeur');
            $count = 1;
            $chaine = '';
            $parametres = array();
            foreach ($employeurs as $idemployeur) {
                if($count == 1){
                    $chaine = 'employeur.id = :value' . $count;
                }else{
                    $chaine = $chaine . ' OR employeur.id = :value' . $count;
                }
                $parametres['value' . $count] = $idemployeur;
                $count++;
            }
            $q->where($chaine);
            $q->setParameters($parametres);
        }
        if ($diplomes && !empty($diplomes) && array_values($diplomes)[0]!='') {
            $q->join("p.diplome", 'diplome');
            $count = 1;
            $chaine = '';
            $parametres = array();
            foreach ($diplomes as $iddiplom) {
                if($count == 1){
                    $chaine = 'diplome.id = :value' . $count;
                }else{
                    $chaine = $chaine . ' OR diplome.id = :value' . $count;
                }
                $parametres['value' . $count] = $iddiplom;
                $count++;
            }
            $q->where($chaine);
            $q->setParameters($parametres);
        }
        if ($genres && !empty($genres) && array_values($genres)[0]!='') {
            $q->join("p.genre", 'genre');
            $count = 1;
            $chaine = '';
            $parametres = array();
            foreach ($genres as $idgenre) {
                if($count == 1){
                    $chaine = 'genre.id = :value' . $count;
                }else{
                    $chaine = $chaine . ' OR genre.id = :value' . $count;
                }
                $parametres['value' . $count] = $idgenre;
                $count++;
            }
            $q->where($chaine);
            $q->setParameters($parametres);
        }
        return $q->getQuery()->getResult();
    }
}